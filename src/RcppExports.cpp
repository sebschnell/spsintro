// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// gen_fib_cpp
std::vector<double> gen_fib_cpp(const int n);
RcppExport SEXP spsintro_gen_fib_cpp(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_fib_cpp(n));
    return rcpp_result_gen;
END_RCPP
}
// show_type_ranges
void show_type_ranges();
RcppExport SEXP spsintro_show_type_ranges() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    show_type_ranges();
    return R_NilValue;
END_RCPP
}
// type_conversions
void type_conversions();
RcppExport SEXP spsintro_type_conversions() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    type_conversions();
    return R_NilValue;
END_RCPP
}
// mix_signed_unsigned
void mix_signed_unsigned();
RcppExport SEXP spsintro_mix_signed_unsigned() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    mix_signed_unsigned();
    return R_NilValue;
END_RCPP
}
// illustrate_scope
void illustrate_scope();
RcppExport SEXP spsintro_illustrate_scope() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    illustrate_scope();
    return R_NilValue;
END_RCPP
}
// show_references
void show_references();
RcppExport SEXP spsintro_show_references() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    show_references();
    return R_NilValue;
END_RCPP
}
// show_pointers
void show_pointers();
RcppExport SEXP spsintro_show_pointers() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    show_pointers();
    return R_NilValue;
END_RCPP
}
// create_tree_struct
void create_tree_struct(double dbh, double height, int no_stems, std::string spec_name);
RcppExport SEXP spsintro_create_tree_struct(SEXP dbhSEXP, SEXP heightSEXP, SEXP no_stemsSEXP, SEXP spec_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type height(heightSEXP);
    Rcpp::traits::input_parameter< int >::type no_stems(no_stemsSEXP);
    Rcpp::traits::input_parameter< std::string >::type spec_name(spec_nameSEXP);
    create_tree_struct(dbh, height, no_stems, spec_name);
    return R_NilValue;
END_RCPP
}
// to_upper_range_for
std::string to_upper_range_for(std::string str);
RcppExport SEXP spsintro_to_upper_range_for(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(to_upper_range_for(str));
    return rcpp_result_gen;
END_RCPP
}
// to_upper_subscript
std::string to_upper_subscript(std::string str);
RcppExport SEXP spsintro_to_upper_subscript(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(to_upper_subscript(str));
    return rcpp_result_gen;
END_RCPP
}
// add_elem
std::vector<int> add_elem(int n);
RcppExport SEXP spsintro_add_elem(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(add_elem(n));
    return rcpp_result_gen;
END_RCPP
}
// sum_elem
double sum_elem(std::vector<double> v);
RcppExport SEXP spsintro_sum_elem(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_elem(v));
    return rcpp_result_gen;
END_RCPP
}
// squ_elem
std::vector<double> squ_elem(std::vector<double> v);
RcppExport SEXP spsintro_squ_elem(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(squ_elem(v));
    return rcpp_result_gen;
END_RCPP
}
// squ_elem_it
std::vector<double> squ_elem_it(std::vector<double> v);
RcppExport SEXP spsintro_squ_elem_it(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(squ_elem_it(v));
    return rcpp_result_gen;
END_RCPP
}
// arr_access
void arr_access();
RcppExport SEXP spsintro_arr_access() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    arr_access();
    return R_NilValue;
END_RCPP
}
// ret_rem
int ret_rem(int a, int b);
RcppExport SEXP spsintro_ret_rem(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(ret_rem(a, b));
    return rcpp_result_gen;
END_RCPP
}
// dem_cond
void dem_cond(int x);
RcppExport SEXP spsintro_dem_cond(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    dem_cond(x);
    return R_NilValue;
END_RCPP
}
// dem_if_else
int dem_if_else(double dbh);
RcppExport SEXP spsintro_dem_if_else(SEXP dbhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    rcpp_result_gen = Rcpp::wrap(dem_if_else(dbh));
    return rcpp_result_gen;
END_RCPP
}
// find_first_neg
int find_first_neg(std::vector<double> x);
RcppExport SEXP spsintro_find_first_neg(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(find_first_neg(x));
    return rcpp_result_gen;
END_RCPP
}
// find_first_neg_for
int find_first_neg_for(std::vector<double> x);
RcppExport SEXP spsintro_find_first_neg_for(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(find_first_neg_for(x));
    return rcpp_result_gen;
END_RCPP
}
// find_first_neg_rf
int find_first_neg_rf(std::vector<double> x);
RcppExport SEXP spsintro_find_first_neg_rf(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(find_first_neg_rf(x));
    return rcpp_result_gen;
END_RCPP
}
// find_first_neg_dw
unsigned find_first_neg_dw(std::vector<double> x);
RcppExport SEXP spsintro_find_first_neg_dw(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(find_first_neg_dw(x));
    return rcpp_result_gen;
END_RCPP
}
// round_cpp
double round_cpp(double x);
RcppExport SEXP spsintro_round_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(round_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// use_polygon_class
void use_polygon_class();
RcppExport SEXP spsintro_use_polygon_class() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    use_polygon_class();
    return R_NilValue;
END_RCPP
}
// inheritance
void inheritance();
RcppExport SEXP spsintro_inheritance() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    inheritance();
    return R_NilValue;
END_RCPP
}
// calc_poly_area
double calc_poly_area(const std::vector<double>& x, const std::vector<double>& y);
RcppExport SEXP spsintro_calc_poly_area(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(calc_poly_area(x, y));
    return rcpp_result_gen;
END_RCPP
}
